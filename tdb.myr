use std
use regex

use "libtdb"

var tdbpath : byte[:]

const __init__ = {
	match std.getenv("TDBPATH")
	| `std.Some e: tdbpath = e
	| `std.None: std.fatal("TDBPATH not set\n")
	;;
}

const usage = {name
	std.fput(std.Err, "list items from database:\n")
	std.fput(std.Err, "{} list [METAKEY1:REGEX1 [... METAKEYN:REGEXN]]\n", name)
	std.fput(std.Err, "\n")
	std.exit(1)
}

const list = {args
	var dir, patterns
	
	patterns = [][:]
	
	for arg in args[1:]
		match std.strfind(arg, ":")
		| `std.Some sz:
			match regex.compile(arg[sz+1:])
			| `std.Ok r:
				std.slpush(&patterns, (std.sldup(arg[:sz]), r))
			| `std.Err e:
				std.fatal("error compiling regex '{}': {}\n", arg[sz+1:], e)
			;;
		| `std.None:
			std.fatal("bad metadata pattern arg '{}'\n", arg)
		;;
	;;
	
	match std.diropen(tdbpath)
	| `std.Ok d:
		dir = d
	| `std.Err err:
		std.fatal("error traversing {}: {}", tdbpath, err)
	;;
	
	while true
		match std.dirread(dir)
		| `std.Some name:
			var path, metatab
			
			if !std.hassuffix(name, ".txt")
				continue
			;;
			
			path = std.pathcat(tdbpath, name)
			
			match readtdbmeta(path)
			| `std.Ok m:
				metatab = m
			| `std.Err (lineno, msg):
				std.fatal("error parsing {}:{} - {}\n", path, lineno, msg)
			;;
			
			for (metapat, pat) in patterns
				for (metakey, metaval) in metatab
					if std.sleq(metapat, metakey)
						match regex.exec(pat, metaval)
						| `std.Some _:
							std.put("{} matched\n", name)
						| `std.None:
						;;
					;;
				;;
			;;
			
			std.slfree(path)
			freetdbmeta(metatab)
		| `std.None:
			break
		;;
	;;
	std.dirclose(dir)
	
	for (metapat, pat) in patterns
		std.slfree(metapat)
		regex.free(pat)
	;;
	
	std.slfree(patterns)
}

const main = {args : byte[:][:]
	if args.len == 1
		usage(args[0])
	;;
	
	match args[1]
	| "list": list(args[1:])
	| _: usage(args[0])
	;;
}
